/*
 * Copyright 2015-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

{
  parserClass="com.facebook.buck.intellij.ideabuck.lang.BuckParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Buck"
  psiImplClassSuffix="Impl"
  psiPackage="com.facebook.buck.intellij.ideabuck.lang.psi"
  psiImplPackage="com.facebook.buck.intellij.ideabuck.lang.psi.impl"

  elementTypeHolderClass="com.facebook.buck.intellij.ideabuck.lang.psi.BuckTypes"
  elementTypeClass="com.facebook.buck.intellij.ideabuck.lang.psi.BuckElementType"
  tokenTypeClass="com.facebook.buck.intellij.ideabuck.lang.psi.BuckTokenType"

  tokens = [
    NONE = 'None'
    BOOLEAN = 'regexp:(True|False)'

    COMMA = ','
    EQUAL = '='
    DOUBLE_EQUAL = '=='
    NOT_EQUAL = '!='
    GREATER_THAN = '>'
    LESS_THAN = '<'
    GREATER_EQUAL = '>='
    LESS_EQUAL = '<='
    UPDATE_OPS = 'regexp:\+=|-=|\*=|/=|//=|%=|&=|\|=|\^=|<<=|>>='
    BIT_OR = '|'
    BIT_AND = '&'
    BIT_XOR = '^'

    SLASH = '\'
    COLON = ':'
    PLUS = '+'
    MINUS = '-'
    DIVISION = '/'
    DIVISION_INT = '//'
    DOT = '.'
    SEMI_COLON = ';'
    STAR = '*'
    DOUBLE_STAR = '**'

    LINE_COMMENT = 'regexp:#[^\r\n]*'
    DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
    SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"
    DOUBLE_QUOTED_DOC_STRING="regexp:\"\"\".*(\"\"\")?"
    SINGLE_QUOTED_DOC_STRING="regexp:'''.*(''')?"

    // As per https://github.com/bazelbuild/starlark/blob/master/spec.md
    // "The following tokens are keywords and may not be used as identifiers:"
    AND = 'and'
    BREAK = 'break'
    CONTINUE = 'continue'
    DEF = 'def'
    ELIF = 'elif'
    ELSE = 'else'
    FOR = 'for'
    IF = 'if'
    IN = 'in'
    LOAD = 'load'
    NOT = 'not'
    OR = 'or'
    PASS = 'pass'
    RETURN = 'return'

    // As per https://github.com/bazelbuild/starlark/blob/master/spec.md
    // "The tokens below also may not be used as identifiers
    // although they do not appear in the grammar;
    // they are reserved as possible future keywords:"
    AS = 'as'
    ASSERT = 'assert'
    CLASS = 'class'
    DEL = 'del'
    EXCEPT = 'except'
    FINALLY = 'finally'
    FROM = 'from'
    GLOBAL = 'global'
    IMPORT = 'import'
    IS = 'is'
    LAMBDA = 'lambda'
    NONLOCAL = 'nonlocal'
    RAISE = 'raise'
    TRY = 'try'
    WHILE = 'while'
    WITH = 'with'
    YIELD = 'yield'

    GLOB = 'glob'

    L_PARENTHESES = '('
    L_BRACKET = '['
    L_CURLY = '{'
    R_PARENTHESES = ')'
    R_BRACKET = ']'
    R_CURLY = '}'
    PERCENT = '%'

    NUMBER = 'regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
    IDENTIFIER = 'regexp:[a-zA-Z_]([a-zA-Z0-9_])*'

    space = 'regexp:(\s|\\(\n|\r|\r\n))+'
  ]
}

buckFile ::= statement*

function_definition ::= 'def' IDENTIFIER '(' parameter_list? ')' ':' suite

parameter_list ::= parameter (',' parameter)* ','?
parameter ::= '**' IDENTIFIER | '*' IDENTIFIER | IDENTIFIER ['=' single_expression]

statement ::= simple_statement | compound_statement

simple_statement ::= small_statement (';' small_statement)* ';'?

small_statement ::= load_call
                    | assignment_target UPDATE_OPS expression
                    | (assignment_target_list ('='))* expression
                    | pass_statement
                    | flow_statement
                    | expression

load_call ::= 'load' '(' load_target_argument (',' load_argument) (',' load_argument)* [','] ')'
load_target_argument ::= string
load_argument ::= [IDENTIFIER '='] string

assignment_target_list ::= assignment_target (',' assignment_target)*

assignment_target ::= primary '.' IDENTIFIER
                      | primary slice_suffix
                      | '(' assignment_target_list ')'
                      | '[' assignment_target_list ']'
                      | IDENTIFIER

pass_statement ::= 'pass'

flow_statement ::= break_statement | continue_statement | return_statement

break_statement ::= 'break'

continue_statement ::= 'continue'

return_statement ::= 'return' [expression]

assert_statement ::= 'assert' expression [',' expression]

compound_statement ::= if_statement | for_statement | function_definition

if_statement ::= 'if' single_expression ':' suite ('elif' single_expression ':' suite)* ['else' ':' suite]

for_statement ::= 'for' loop_variable 'in' expression ':' suite
loop_variable ::= primary_with_suffix (',' primary_with_suffix)*

suite ::= simple_statement | INDENT statement+ DEDENT

expression ::= single_expression (',' single_expression)*

single_expression ::= unary_op single_expression
                      | (primary_with_suffix [binary_op single_expression]
                      | 'lambda' [parameter_list] ':' single_expression)
                      ['if' single_expression 'else' single_expression]
unary_op ::= 'not' | '+' | '-' | '~'
binary_op ::=  'or' | 'and' | '==' | '!=' | '<' | '>' | '<=' | '>='
                    | 'in' | 'not' 'in' | 'is' | 'not' 'is'
                    | '|' | '^' | '&' | '-' | '+' | '*' | '%' | '/' | '//'


primary_with_suffix ::= primary (dot_suffix | slice_suffix)*

primary ::= NONE | BOOLEAN | NUMBER | function_call | IDENTIFIER | string | list | dict | '(' expression ','? ')' | unary_op primary_with_suffix
function_call ::=  function_name function_call_suffix
function_name ::= ('glob' | IDENTIFIER)

list ::= '[' (list_elements ']' | expression comprehension_suffix ']' | ']')
list_elements ::= single_expression (',' single_expression)* ','?

function_call_suffix ::= '(' argument_list? ')'
slice_suffix ::= '[' single_expression? (':' single_expression? (':' single_expression?)?)? ']'
dot_suffix ::= '.' (function_call | IDENTIFIER)

dict ::= '{' (dict_entry ((',' dict_entry)* ','? '}' | comprehension_suffix '}') | '}')
dict_entry ::= single_expression ':' single_expression

argument_list ::= argument (',' argument)* ','?
argument ::= '**' single_expression | '*' single_expression | [property_lvalue '='] single_expression
property_lvalue ::= IDENTIFIER

comprehension_suffix ::= 'for' loop_variable 'in' single_expression ['if' single_expression] comprehension_suffix*

string ::= (DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING | DOUBLE_QUOTED_DOC_STRING | SINGLE_QUOTED_DOC_STRING) (PERCENT primary) ?
