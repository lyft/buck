/*
 * Copyright 2018-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
{namespace buck.query}

/**
 * @param anchor
 * @param title
 */
{template .section}
  <h4 id="{$anchor}">{$title}</h4>
  <p>
{/template}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'buck query' /}
    {param navid: 'command_query' /}
    {param prettify: true /}
    {param description}
      Provide facilities to query information about the target-nodes graph.
    {/param}
    {param content}

{call buck.command}
{param overview}
<p>
The <code>buck query</code> command provides functionality to query
the <em>target-nodes</em> graph and return the build targets that 
satisfy your query expression. 
</p>

<p>
The query language implemented in <code>buck query</code>, enables you to 
combine multiple operators in a single command.
For example, to retrieve a list of all the tests
for a build target, you can combine the <code>deps()</code> and <code>testsof()</code> operators 
into a single call to <code>buck query</code>.
</p>

<p>
<pre>
{literal}
buck query "testsof(deps('//java/com/example/app:amazing'))"
{/literal}
</pre>
</p>

<h2>Query Language</h2>

<p>
The Buck query language was inspired by 
the <a href="http://bazel.io/docs/query.html"> Bazel Query Language</a>. 
The Buck query language uses the same parser, so the lexical syntax is similar. 
The Buck query language supports a subset of Bazel's query functionality with
a few extensions, such as <code>attrfilter</code>, <code>inputs</code>,
and <code>owner</code>.
</p>

<h3>Lexical Syntax</h3>

<p>Expressions in the query language are composed of the following tokens:</p>

<ul>
  <li>
    <b>Keywords</b>, such as <code>deps</code> or <code>testsof</code>.
    Keywords are the reserved words of the language. The complete set of
    keywords is:
    <ul style="line-height:0.5em">
        <li><a href="#allpaths"><code>allpaths</code></a>: All dependency paths</li>
        <li><a href="#attrfilter"><code>attrfilter</code></a>: Rule attribute filtering</li>
        <li><a href="#buildfile"><code>buildfile</code></a>: Build files of targets</li>
        <li><a href="#deps"><code>deps and first-order-deps</code></a>: Transitive closure of dependencies</li>
        <li><a href="#set-operations"><code>except</code></a>: Set difference</li>
        <li><a href="#filter"><code>filter</code></a>: Filter targets by name</li>
        <li><a href="#inputs"><code>inputs</code></a>: Direct input files</li>
        <li><a href="#set-operations"><code>intersect</code></a>: Set intersection</li>
        <li><a href="#kind"><code>kind</code></a>: Filter targets by rule type</li>
        <li><a href="#labels"><code>labels</code></a>: Extract content of rule attributes</li>
        <li><a href="#owner"><code>owner</code></a>: Find targets that own specified files</li>
        <li><a href="#rdeps"><code>rdeps</code></a>: Transitive closure of reverse dependencies</li>
        <li><a href="#set"><code>set</code></a>: Group targets</li>
        <li><a href="#testsof"><code>testsof</code></a>: List the tests of the specified targets</li>
        <li><a href="#set-operations"><code>union</code></a>: Set union</li>
    </ul>
  </li>
  <li>
    <p>
      <b>Words</b>, such as <code>//foo:bar</code> and <code>//foo:bar+lib"
      </code>. 
      If a character sequence is "quoted", that is, it begins and ends with a
      single-quote (<code>'</code>), or begins and ends with a
      double-quote (<code>"</code>), it is always parsed as a word. 
      If a character sequence is not quoted, it is still parsed as a word if it adheres to
      certain conditions: unquoted words are sequence of characters drawn 
      from the set of alphabet characters, numerals, forward slash (<code>/</code>), 
      colon (<code>:</code>), period (<code>.</code>), hyphen (<code>-</code>), 
      underscore (<code>_</code>), and asterisk (<code>*</code>).
      Unquoted words may not start with a hyphen or period.
      This syntax makes quoting unnecessary in many cases.
      For example, quoting <code>"java_test"</code> is unnecessary.
    </p>

    <p>
      Consider the following additional examples:

<pre>
{literal}
//foo:bar+wiz    # WRONG: scanned as //foo:bar + wiz.
//foo:bar=wiz    # WRONG: scanned as //foo:bar = wiz.
'//foo:bar+wiz'  # Okay.
'//foo:bar=wiz'  # Okay.
{/literal}
</pre>

    </p>

    <p>
      Note that quoting of words is in addition to any quoting that may be
      required by your shell. In the following example, double-quotes
      are used for the shell and single-quotes for the <code>build target</code> expression.

<pre>
{literal}
buck query " '//foo:bar=wiz' "
{/literal}
</pre>

    </p>

    <p>
      You should always use quotes when writing scripts that
      construct <code>buck query</code> expressions <em>from user-supplied values</em>.
    </p>

  </li>
  <li>
    <b>Punctuation</b>, such as parentheses (<code>()</code>), period
    (<code>.</code>) and comma (<code>,</code>), etc. Words containing
    punctuation&mdash;other than the exceptions listed above under <b>Words</b>&mdash;must be quoted.
  </li>
</ul>

<p>
Whitespace characters outside of a quoted word are ignored.
</p>

<h3>Expressions: syntax and semantics of the grammar</h3>

<p>
This is the grammar of the query language, expressed in Extended Backus
Naur Form (<a href="https://en.wikipedia.org/wiki/Extended_Backus-Naur_Form">EBNF</a>) notation:
</p>

<pre>
{literal}
expr ::= word
       | (expr)
       | expr intersect expr
       | expr ^ expr
       | expr union expr
       | expr + expr
       | expr except expr
       | expr - expr
       | allpaths(expr, expr)
       | attrfilter(word, word, expr)
       | buildfile(expr)
       | deps(expr)
       | deps(expr, depth)
       | deps(expr, depth, expr)
       | deps(expr, depth, first-order-deps(expr))
       | filter(word, expr)
       | inputs(expr)
       | kind(word, expr)
       | labels(word, expr)
       | owner(word)
       | rdeps(expr, expr)
       | rdeps(expr, expr, depth)
       | set(word *)
       | testsof(expr)
{/literal}
</pre>

<h4>Target Patterns</h4>

<p>
<pre>
expr ::= word
</pre>
</p>

<p>
Syntactically, a <a href="{ROOT}concept/build_target_pattern.html">
build target pattern</a>, or build target <em>expression</em>, is just a word.  
A build target pattern evaluates to a set containing one or more elements.
It is interpreted as an unordered set of targets. 
</p>

<p>
For example, the word <code>//foo:bar</code> resolves to a set containing one
build target, while <code>//foo/...</code> resolves to all targets in every directory
beneath the </code>foo</code> directory.
</p>


<h4>Aliases</h4>

<p>
<pre>
expr ::= word
</pre>
</p>

<p>
Aliases defined in {call buck.buckconfig_link /} can
be used in queries. Aliases resolve to their corresponding build
targets. Suppose there is the following alias 
</p>

<p>
<pre>
{literal}
app = //apps/myapp:app
{/literal}
</pre>
</p>

<p>
then <code>app</code> can be used
instead of <code>//apps/myapp:app</code> in query expressions.
</p>

<p>
You can also use <code>buck query</code> to resolve aliases. 
For example:
</p>

<p>
<pre>
{literal}
$ buck query app
//apps/myapp:app
{/literal}
</pre>
</p>


<h4>Parenthesized expressions</h4>

<p>
<pre>
expr ::= (expr)
</pre>
</p>

<p>
Parentheses associate sub-expressions to force an order of evaluation.
A parenthesized expression resolves to the value of the expression it
encloses.
</p>


{call .section}
{param anchor: 'set-operations' /}
{param title: 'Algebraic set operations: intersection, union, set difference'/}
{/call}

<p>
<pre>
{literal}
expr ::= expr intersect expr
       | expr ^ expr
       | expr union expr
       | expr + expr
       | expr except expr
       | expr - expr
{/literal}
</pre>
</p>

<p>
These three operators compute the corresponding set operations over their arguments.
Each operator has two forms, a nominal form, such as <code>intersect</code>, 
and a symbolic form, such as <code>^</code>. 
Both forms are equivalent; the symbolic forms are just quicker to type. For example,
</p>

<p>
<pre>
buck query "deps('//foo:bar') intersect deps('//baz:lib')"
</pre>
</p>

<p>
and
</p>

<p>
<pre>
buck query "deps('//foo:bar') ^ deps('//baz:lib')"
</pre>
</p>

<p>
both return the targets that appear in the transitive closure
of <code>//foo:bar</code> and <code>//baz:lib</code>. 
</p>

<p>
The <code>intersect</code> (<code>^</code>)
and <code>union</code> (<code>+</code>) operators are commutative
(symmetric); however, the <code>except</code> (<code>-</code>) operator is asymmetric.
</p>

<p>
The parser treats all three operators as left-associative and of equal
precedence, so we strongly recommend that you use parentheses if you need to ensure a
specific order of evaluation. For example, the first two 
expressions are equivalent, but the third is not:
</p>

<p>
<pre>
{literal}
x intersect y union z
(x intersect y) union z
x intersect (y union z)
{/literal}
</pre>
</p>


{call .section}
{param anchor: 'set' /}
{param title: 'Group targets: set'/}
{/call}

<p>
<b>Semantics</b>
<pre>
{literal}
<code>set(<em>a</em> <em>b</em> <em>c</em> ...)</code> 
{/literal}
</pre>
</p>


<p>
<b>Syntax</b>
<pre>
{literal}
expr ::= set(expr *)
{/literal}
</pre>
</p>

<p>
The <code>set(<em>a</em> <em>b</em> <em>c</em> ...)</code> operator
computes the union of a set of zero or more targets. Separate the
targets with white space (not commas).  Quote the targets to ensure that
they are parsed correctly.
</p>

<p>
If you want to invoke <code>buck query</code> on a list of targets, 
then <code>set()</code> is a way to group this list in the query. 
</p>

<p>
<b>Example:</b>
</p>

{call buckquery.example_multiple_targets /}

<p>
<b>Example:</b>
</p>

<p>
The following command line returns the merged set (union) of
dependencies for the targets: <code>main</code> and <code>subs</code> in
the build file in the root of the Buck project.
</p>

<p>
<pre>
{literal}
buck query "deps( set( '//:main' '//:subs' ) )"
{/literal}
</pre>
</p>



{call .section}
{param anchor: 'allpaths' /}
{param title: 'All dependency paths: allpaths'/}
{/call}

<p>
<b>Semantics</b>
<pre>
{literal}
allpaths(<em>from</em>, <em>to</em>)
{/literal}
</pre>
</p>

<p>
<b>Syntax</b>
<pre>
{literal}
expr ::= allpaths(expr, expr)
{/literal}
</pre>
</p>

<p>
The <code>allpaths(<em>from</em>, <em>to</em>)</code> operator evaluates to the graph formed by
paths between the sets <code>from</code> and <code>to</code>, following the
dependencies between nodes. For example, the value of

<p>
<pre>
{literal}
buck query "allpaths('//foo:bar', '//foo/bar/lib:baz')"
{/literal}
</pre><p>

is the dependency graph rooted at the single target node <code>//foo:bar</code>,
that includes all target nodes that depend on <code>//foo/bar/lib:baz</code>.
</p>

<p>
The two arguments to <code>allpaths()</code> can themselves be expressions.
For example, the command:


<p>
<pre>
{literal}
buck query "allpaths(kind(java_library, '//...'), '//foo:bar')"
{/literal}
</pre>
</p>

shows all the paths between any <code>java_library</code> in
the repository and the target <code>//foo:bar</code>.
</p>

<p>
We recommend using <code>allpaths()</code> with 
the <code>--output-format dot</code>{sp}parameter to generate a
graphviz file that can then
be rendered as an image. For example:
</p>

<p><pre class="prettyprint lang-py">
{literal}
$ buck query "allpaths('//foo:bar', '//foo/bar/lib:baz')" --output-format dot --output-file result.dot
$ dot -Tpng result.dot -o image.png
{/literal}
</pre>
</p>

<p><em>Graphviz</em> is an open-source graph-visualization software
tool. Graphviz uses the <em>dot</em> language to describe graphs.</p>


{call .section}
{param anchor: 'attrfilter' /}
{param title: 'Rule attribute filtering: attrfilter'/}
{/call}

<p>
<b>Semantics</b>
<pre>
{literal}
attrfilter(<em>attribute</em>, <em>value</em>, <em>expression</em>)
{/literal}
</pre>
</p>

<p>
<b>Syntax</b>
<pre>
{literal}
expr ::= attrfilter(word, word, expr)
{/literal}
</pre>
</p>

<p>
The <code>attrfilter(<em>attribute</em>, <em>value</em>, <em>expression</em>)</code> operator 
evaluates the given <code><em>expression</em></code> and filters the resulting build targets
for those where the specified <code><em>attribute</em></code> contains the 
specified <code><em>value</em></code>.
</p>

<p>
In this context, the term <em>attribute</em> refers to an argument in a build rule, 
such as <code>name</code>, <code>headers</code>, <code>srcs</code>, or <code>deps</code>.
</p>

<p>
If the attribute is a single value, say <code>name</code>, it is compared to the
specified <code><em>value</em></code>, and the target is returned if
they match. 
If the attribute is a list, the target is returned if that list contains the specified <code><em>value</em></code>. 
If the attribute is a dictionary, the target is returned if the <code><em>value</em></code> exists in either the keys or the values of the dictionary.
</p>

<p>
For example, 
<p>

<p>
<pre>
{literal}
buck query "attrfilter(deps, '//foo:bar', '//...')"
{/literal}
</pre>
</p>

<p>
returns the build targets in the repository that depend on <code>//foo:bar</code>&mdash;or 
more precisely: those build targets that include <code>//foo:bar</code> in 
their <code>deps</code> argument list.
</p>

<p>
The match performed by <code>attrfilter()</code> is semantic rather than textual. 
So, for example, if you have the following <code>deps</code> argument in
your build file:

<p>
<pre>
{literal}
cxx_binary(
  name = 'main',
  srcs = [
    'main.cpp'
  ],
  deps = [
    ':myclass',
  ],
)
{/literal}
</pre>
</p>

<p>
Your <code>attrfilter()</code> clause should be:
</p>

<p>
<pre>
{literal}
buck query "attrfilter( deps, '//:myclass', '//...' )"
{/literal}
</pre>
</p>

<p>
Note the double forward slash (<code>//</code>) before the second
argument to <code>attrfilter()</code>.
</p>


{call .section}
{param anchor: 'buildfile' /}
{param title: 'Build files of targets: buildfile'/}
{/call}

<p>
<b>Semantics</b>
<pre>
{literal}
buildfile(<em>expression</em>)
{/literal}
</pre>
</p>

<p>
<b>Syntax</b>
<pre>
{literal}
expr ::= buildfile(expr)
{/literal}
</pre>
</p>

<p>
The <code>buildfile(expression)</code> operator evaluates to those build 
files that define the targets that result from the evaluation
of <code>expression</code>.
</p>

{call buckquery.example_buildfile_owner /}


{call .section}
{param anchor: 'deps' /}
{param title: 'Transitive closure of dependencies: deps and first-order-deps'/}
{/call}

<p>
<b>Semantics</b>
<pre>
{literal}
deps(<em>x</em>)
deps(<em>x</em>, <em>integer</em>)
deps(<em>x</em>, <em>integer</em>, <em>y</em>)
deps(<em>x</em>, <em>integer</em>, first_order_deps(<em>y</em>))
{/literal}
</pre>
</p>

<p>
<b>Syntax</b>
<pre>
{literal}
expr ::= deps(expr)
       | deps(expr, depth)
       | deps(expr, depth, expr)
       | deps(expr, depth, first_order_deps(expr))
{/literal}
</pre>
</p>

<p>
The <code>deps(<em>x</em>)</code> operator evaluates to the graph formed by the
transitive closure of the dependencies of its argument set, <i>x</i>,
including the nodes from the argument set itself. 
For example, the value of 
</p>

<p>
<pre>
{literal}
buck query "deps('//foo:bar')" 
{/literal}
</pre>
</p>

<p>
is the dependency graph rooted at the target node <code>//foo:bar</code>. 
It includes all of the dependencies of <code>//foo:bar</code>. 
It also includes <code>//foo:bar</code> itself.
</p>

<p>
The <code>deps</code> operator accepts an optional second argument, which is
an integer literal specifying an upper bound on the depth of the search.  So,
</p>

<p>
<pre>
{literal}
deps('//foo:bar', 1) 
{/literal}
</pre>
</p>

<p>
evaluates to the direct dependencies of the target <code>//foo:bar</code>, and 
</p>

<p>
<pre>
{literal}
deps('//foo:bar', 2) 
{/literal}
</pre>
</p>

<p>
further includes the nodes directly reachable from the nodes
in <code>deps('//foo:bar', 1)</code>, and so on. If the depth parameter is
omitted, the search is unbounded, that is, it computes the entire transitive 
closure of dependencies.
</p>

<h4>Filter expressions and first_order_deps()</h4>
<p>
The <code>deps()</code> operator also accepts an optional third argument, which is
a filter expression that is evaluated for each node and returns the
child nodes to recurse on when collecting transitive dependencies.
</p>

<p>
This filter expression can use the <code>first_order_deps()</code> operator
which returns a set that contains the first-order dependencies of the current
node&mdash;which is equivalent to <code>deps(&lt;node&gt;, 1)</code>.
For example, the query, 
</p>

<p>
<pre>
{literal}
buck query "deps('//foo:bar', 1, first_order_deps())"
{/literal}
</pre>
</p>

<p>
is equivalent to 
</p>

<p>
<pre>
{literal}
buck query "deps('//foo:bar', 1)"
{/literal}
</pre>
</p>

<p>
The <code>first_order_deps()</code> operator can be used only
inside the expression passed as an argument to <code>deps()</code>.
<p>

<p>
Note that because <code>deps()</code> uses positional parameters,
you must specify the second argument in order to specify the third. In
this scenario, if you want the search to be unbounded, we recommend that
you use <code>2147483647</code> which corresponds to Java's <code>Integer.MAX_VALUE</code>.
</p>

{call .section}
{param anchor: 'filter' /}
{param title: 'Filter targets by name: filter'/}
{/call}


<p>
<b>Semantics</b>
<pre>
{literal}
filter(<em>pattern</em>, <em>expression</em>)
{/literal}
</pre>
</p>

<p>
<b>Syntax</b>
<pre>
{literal}
expr ::= filter(word, expr)
{/literal}
</pre>
</p>

<p>
The <code>filter(<em>pattern</em>, <em>expression</em>)</code> operator evaluates the
specified
{sp}<code><em>expression</em></code> and returns the targets that have a
name attribute that matches the specified regular expression <code><em>pattern</em></code>.
For example, 

<p>
<pre>
{literal}
buck query "filter('library', deps('//foo:bar'))"
{/literal}
</pre>
</p>

<p>
returns the targets in the transitive closure of <code>//foo:bar</code>
that contain the string {sp}<code>library</code> in their name attribute.
</p>

<p>
The <code>filter()</code> operator performs a <em>partial</em> match. 
So, both of the following clauses would match a target with the name <code>main</code>.

<p>
<pre>
{literal}
buck query "filter( 'main', '//...' )"
{/literal}
</pre>
</p>

<p>
<pre>
{literal}
buck query "filter( 'mai', '//...' )"
{/literal}
</pre>
</p>


<p>
Another example: 
</p>

<pre>
{literal}
buck query "filter('.*\.java$', labels(srcs, '//foo:bar'))"
{/literal}
</pre>
</p>

<p>
returns the <code>java</code> files used to build
{sp}<code>//foo:bar</code>. 
</p>

<p>
You often need to quote the pattern to ensure that regular expressions, 
such as <code>.*xpto</code>, are parsed correctly.
</p>


{call .section}
{param anchor: 'inputs' /}
{param title: 'Direct input files: inputs'/}
{/call}

<p>
<b>Semantics</b>
<pre>
{literal}
inputs(<em>x</em>)
{/literal}
</pre>
</p>

<p>
<b>Syntax</b>
<pre>
{literal}
expr ::= inputs(expr)
{/literal}
</pre>
</p>

<p>
The <code>inputs(x)</code> operator returns the files that are inputs
to the argument set <i>x</i>, ignoring all dependencies. Note that it does not
include any files required for parsing, such as the BUCK file. Rather,
it returns only the files required to actually run the build after parsing 
has been performed.
</p>

<p>
Note that <code>input()</code> returns only those input files indicated
by the <em>target graph</em>. Input files that are present in the <em>action graph</em> but 
not in the target graph are not returned by <code>input()</code>.
</p>

<p>
You could consider the <code>inputs()</code> and <code>owner()</code> operators 
to be inverses of each other.
</p>


{call .section}
{param anchor: 'kind' /}
{param title: 'Filter targets by rule type: kind'/}
{/call}

<p>
<b>Semantics</b>
<pre>
{literal}
kind(<em>pattern</em>, <em>expression</em>)
{/literal}
</pre>
</p>

<p>
<b>Syntax</b>
<pre>
{literal}
expr ::= kind(word, expr)
{/literal}
</pre>
</p>

<p>
The <code>kind(<em>pattern</em>, <em>expression</em>)</code> operator
evaluates the specified {sp}<code>expression</code> and returns the targets where 
the rule type matches the specified <code>pattern</code>.
For example, 
</p>

<p>
<pre>
{literal}
buck query "kind('java_library', deps('//foo:bar'))"
{/literal}
</pre>
</p>

<p>
returns all <code>java_library</code> targets in the transitive dependencies
of <code>//foo:bar</code>.
</p>

<p>
The specified <em>pattern</em> can be a regular expression. For example,
</p>

<p>
<pre>
{literal}
buck query "kind('.*_test', '//...')"
{/literal}
</pre>
</p>

<p>
returns all targets in the repository with a rule type that ends 
with <code>_test</code>, such as <code>java_test</code> and <code>cxx_test</code>.
</p>

<p>
You often need to quote the pattern to ensure that regular expressions, 
such as <code>.*xpto</code>, are parsed correctly.
</p>

<p>
To get a list of the available rule types in a given set of targets, you could use
a command such as the following:
</p>

<p>
<pre>
{literal}
buck query : --output-attribute buck.type
{/literal}
</pre>
</p>

<p>
which prints all the rule types in the build file in the current
directory (<code>:</code>)&mdash;in JSON format. 
See <code>--output-attribute</code> described in the <b>Parameters</b> section 
below for more information.
</p>


{call .section}
{param anchor: 'labels' /}
{param title: 'Extract content of rule attributes: labels'/}
{/call}

<p>
<b>Semantics</b>
<pre>
{literal}
labels(<em>name</em>, <em>expression</em>)
{/literal}
</pre>
</p>

<p>
<b>Syntax</b>
<pre>
{literal}
expr ::= labels(word, expr)
{/literal}
</pre>
</p>

<p>
The <code>labels(<em>name</em>, <em>expression</em>)</code> operator returns the 
set of build targets and file paths listed in the 
attribute specified by the <em>name</em> parameter, in the targets that result from the 
evaluation of <em>expression</em>.
Valid values for <em>name</em> include <code>srcs</code>, <code>headers</code>, and <code>deps</code>.
</p>

<p>
<b>Example</b>: Get all build targets and file paths specified in 
the <code>srcs</code> attribute for <em>all the rules</em> in the build
file in the current directory.
</p>

<p> <pre>
{literal}
buck query "labels( 'srcs', ':' )"
{/literal}
</pre>
</p>

<p>
In performing this operation, Buck validates that any source
files referenced in these attributes do, in fact, exist; Buck generates
an error if they do not.
</p>

<p>
<b>Example</b>: Get all the build targets and file paths specified in 
the <code>deps</code> arguments in the <em>tests of</em> the 
target <code>//foo:bar</code>. 
</p>

<p> <pre>
{literal}
buck query "labels('deps', testsof('//foo:bar'))"
{/literal}
</pre>
</p>

<p>
Note that <code>deps</code> must be quoted because, in addition to being
a build-file attribute, it is itself a reserved keyword of the query language.
</p>

{call .section}
{param anchor: 'owner' /}
{param title: 'Find targets that own specified files: owner'/}
{/call}

<p>
<b>Semantics</b>
<pre>
{literal}
owner(<em>file</em>)
{/literal}
</pre>
</p>

<p>
<b>Syntax</b>
<pre>
{literal}
expr ::= owner(word)
{/literal}
</pre>
</p>

<p>
The <code>owner(<em>file</em>)</code> operator returns the targets that own the 
specified <em>file</em>. In this context, <em>own</em> means that the
target has the specified file as an input. You could consider 
the <code>owner()</code> and <code>inputs()</code> operators 
to be inverses of each other.  
</p>

<p>
<b>Example</b>: 
</p>

<p>
<pre>
{literal}
buck query "owner('examples/1.txt')"
{/literal}
</pre>
</p>

<p>
returns the targets that owns the file <code>examples/1.txt</code>,
which could be a value such as <code>//examples:one</code>.
</p>

<p>
It is possible for the specified file to have multiple owners, in which 
case, <code>owner()</code> returns a set of targets.
</p>

<p>
If no owner for the file is found, <code>owner()</code> outputs the message: 
<pre>
{literal}
No owner was found for &lt;file&gt;
{/literal}
</pre>
</p>


{call .section}
{param anchor: 'rdeps' /}
{param title: 'Transitive closure of reverse dependencies: rdeps'/}
{/call}

<p>
<b>Semantics</b>
<pre>
{literal}
rdeps(<em>u</em>, <em>x</em>)</code> 
{/literal}
</pre>
</p>

<p>
<b>Syntax</b>
<p>
<pre>
{literal}
expr ::= rdeps(expr, expr)
       | rdeps(expr, expr, depth)
{/literal}
</pre>
</p>

<p>
The <code>rdeps(u, x)</code> operator returns the reverse dependencies
of the argument set <code>x</code> within the transitive closure of the
set <code>u</code> (the <em>universe</em>). The returned values include 
the nodes from the argument set <code>x</code> itself.
</p>

<p>
The <code>rdeps</code> operator accepts an optional third argument, which is
an integer literal specifying an upper bound on the depth of the search.
</p>

<p>
The following example,
</p>

<p>
<pre>
{literal}
buck query "rdeps('//foo:bar', '//example:baz', 1)"
{/literal}
</pre>
</p>

<p>
returns the targets in the transitive closure of <code>//foo:bar</code> that 
depend directly on <code>//example:baz</code>. 
</p>

<p>
If the <em>depth</em> parameter is omitted, the search is unbounded.
</p>


{call .section}
{param anchor: 'testsof' /}
{param title: 'List the tests of the specified targets: testsof'/}
{/call}

<p>
<b>Semantics</b>
<pre>
{literal}
testsof(<em>expression</em>)
{/literal}
</pre>
</p>

<p>
<b>Syntax</b>
<pre>
{literal}
expr ::= testsof(expr)
{/literal}
</pre>
</p>

<p>
The <code>testsof(<em>expression</em>)</code> operator returns the tests associated with the 
targets specified by <em>expression</em>. 
For example, 
</p>


<p>
<pre>
{literal}
buck query "testsof(set('//foo:bar' '//baz:app+lib')"
{/literal}
</pre>
</p>

<p>
returns the tests associated with <code>//foo:bar</code> and <code>//baz:app+lib</code>.
</p>

<p>
To obtain all the tests associated with the target and its dependencies, 
you can combine the <code>testsof()</code> operator with 
the <code>deps()</code> operator. For example,
</p>

<p>
<pre>
{literal}
buck query "testsof(deps('//foo:bar'))"
{/literal}
</pre>
</p>

<p>
first finds the transitive closure of <code>//foo:bar</code>, 
and then lists all the tests associated with the targets in this transitive closure.
</p>


<h2>Executing multiple queries at once</h2>

<p>
Suppose you want to know the tests associated with a set of targets. 
This can be done by combining 
the <code>testsof</code>, <code>deps</code> and <code>set</code> operators.
For example,
</p>

<p>
<pre>
{literal}
buck query "testsof(deps(set('target1' 'target2' 'target3')))"
{/literal}
</pre>
</p>

<p>
Suppose you now want to know the tests for <em>each</em> of these targets;
the above command returns the union of the tests.
Instead of executing one query for the entire set of targets, <code>buck query</code> provides
a way to repeat a query with different targets using a single command.
To do this, first define the query expression format and then list the input targets, 
separated by spaces. For example,
</p>

<p>
<pre>
{literal}
buck query "testsof(deps( %s ))" target1 target2 target3
{/literal}
</pre>
</p>

<p>
The <code>%s</code> in the query expression is replaced by each of
the listed targets, and for each target, the resulting query expression is evaluated. 
If you add the <code>--output-format json</code> parameter, the result of
the command is grouped by input target; otherwise, as in the previous
example using <code>set()</code>, the command merges the results and 
returns the union of the queries.
</p>

<p>
This syntax is also useful for subcommands
that take arguments that are not targets, 
such as <code>owner()</code>. 
Recall that the <code>set()</code> operator works only with targets, 
but the <code>owner()</code> operator takes a filename as its argument.
</p>

<p>
<pre>
{literal}
buck query "owner( %s )" main.cpp myclass.cpp myclass.h
{/literal}
</pre>
</p>

<h2>Referencing Args Files</h2>

<p>
When running queries, arguments can be stored in external files, one argument per line, and
referenced with the <code>@</code> symbol. This is convenient when the number of arguments is long
or when you want to persist the query input in source control.
</p>

<p>
<pre>
buck query "testsof(deps(%s))" @/path/to/args-file
</pre>
</p>

<p>
If you want to include all the targets in the <code>@</code>-file in a
single query execution, you can use the following alternative syntax.
Note the addition of the capital "<code>S</code>" in "<code>%Ss</code>".
</p>

<p>
<pre>
buck query "testsof(deps(%Ss))" @/path/to/args-file
</pre>
</p>

<p>
In the example above, the lines of the file are converted to a set and
substituted for the <code>%Ss</code>. In addition, each line's contents
are singly quoted.  In the example above, if the args file contains the following:
</p>

<p>
<pre>
{literal}
//foo:bar
//foo:baz
{/literal}
</pre>
</p>

<p>
Then the query expression is equivalent to:
</p>

<p>
<pre>
{literal}
buck query "testsof(deps(set('//foo:bar' '//foo:baz')))"
{/literal}
</pre>
</p>


<p>
If you use multiple <code>%Ss</code> operators in a single query, you
can specify which lines in the <code>@</code>-file should be used
for each instance of <code>%Ss</code> in the query expression:
use <code>--</code> to separate elements that go in different sets. 
For example:
</p>

<p>
<pre>
buck query "testsof(deps(%Ss)) union deps(%Ss)" @path/to/args-file
</pre>
</p>

<p>
<pre>
{literal}
//foo:foo
--
//bar:bar
{/literal}
</pre>
</p>

<p>
is equivalent to running the following:
</p>

<p>
<pre>
buck query "testsof(deps(set('//foo:foo'))) union deps(set('//bar:bar'))"
</pre>
</p>

{/param}

{param params}

{call buck.param}
  {param name: 'output-format dot'  /}
  {param desc}
  <p>
  Outputs the digraph representing the query results in <a href=
  "https://en.wikipedia.org/wiki/DOT_(graph_description_language)#Directed_graphs">
  dot format</a>.
  The nodes will be colored according to their type.
  See <a href="http://www.graphviz.org/doc/info/colors.html">graphviz.org</a> for color definitions.
<p><pre class="prettyprint lang-py">
{literal}
android_aar          : springgreen2
android_library      : springgreen3
android_resource     : springgreen1
android_prebuilt_aar : olivedrab3
java_library         : indianred1
prebuilt_jar         : mediumpurple1
{/literal}
</pre>
</p>

  Example usage:
  </p>

<p><pre class="prettyprint lang-py">
{literal}
$ buck query "allpaths('//foo:bar', '//path/to:other')" --output-format dot --output-file graph.dot
$ dot -Tpng graph.dot -o graph.png
{/literal}
</pre>
</p>

  <p>Then, open <code>graph.png</code> to visualize the graph.</p>

  {/param}
{/call}

{call buck.param}
    {param name: 'output-format dot_bfs'  /}
    {param desc}
      <p>
        Outputs the digraph representing the query results in <a href="https://en.wikipedia.org/wiki/DOT_(graph_description_language)#Directed_graphs">dot format</a> in bfs order.
        The nodes will be colored according to their type.
      </p>

      Example usage:
      <p><pre class="prettyprint lang-py">
          {literal}
$ buck query "allpaths('//foo:bar', '//path/to:other')" --output-format dot_bfs --output-file graph.dot
$ dot -Tpng graph.dot -o graph.png
          {/literal}
      </pre>
      </p>

      <p>Then, open <code>graph.png</code> to visualize the graph.</p>

    {/param}
{/call}

{call buck.param}
  {param name: 'output-format json' /}
  {param desc}
    <p>
      Outputs the results as JSON.
    </p>
  {/param}
{/call}

{call buck.param}
    {param name: 'output-format thrift' /}
    {param desc}
      <p>
        Outputs the results as thrift binary.
      </p>
    {/param}
{/call}

{call buck.param}
    {param name: 'output-file' /}
    {param desc}
      <p>
      Outputs the results into file path specified.
      </p>
      Example usage:
      <p><pre class="prettyprint lang-py">
          {literal}
$ buck query "allpaths('//foo:bar', '//path/to:other')" --output-format dot --output-file graph.dot
$ dot -Tpng graph.dot -o graph.png
          {/literal}
      </pre>
      </p>
    {/param}
{/call}

{call buck.param}
  {param name: 'output-attributes <attributes>' /}
  {param desc}
  <div id="output-attributes">
  <p>
  Outputs the results as a JSON dictionary
  {sp}<code>build target -> attributes map</code>. The attributes map is a
  dictionary mapping the specified attributes to their values for the build
  target. Attributes are regular expressions (e.g. '.*' matches all attributes).
  If an attribute (e.g. <code>srcs</code>) is not defined for a build target,
  it is not present in the output.
  <br /> 
  <br /> 
  NOTE: There is ambiguity when using this option with '%s' style queries.
        It is suggested to use <code>--output-attribute</code> instead.

  Example:
  </p>

<p><pre class="prettyprint lang-py">
{literal}
$ buck query '//example/...' --output-attributes buck.type name srcs
{
  "//example/foo:bar" : {
    "buck.type" : "cxx_library",
    "name" : "foobar",
    "srcs" : [ "example/foo/bar.cc", "example/foo/lib/lib.cc" ]
  }
  "//example/foo:main" : {
    "buck.type" : "cxx_binary",
    "name" : "main"
  }
}
{/literal}
</pre>
</p>

</div>

  {/param}
{/call}

{call buck.param}
  {param name: 'output-attribute <attribute>' /}
  {param desc}
  <div id="output-attributes">
  <p>
  Outputs the results as a JSON dictionary
  {sp}<code>build target -> attributes map</code>. The attributes map is a
  dictionary mapping the specified attributes to their values for the build
  target. Attributes are regular expressions (e.g. '.*' matches all attributes).
  If an attribute (e.g. <code>srcs</code>) is not defined for a build target,
  it is not present in the output.
  
  <br /> 
  <br /> 
  Multiple attributes may be specified by providing the --output-attribute
  option multiple times.

  <br /> 
  <br /> 
  NOTE: The primary difference between this and --output-attributes is that
        --output-attribute works correctly with other multiple-argument
        queries.

  Example:
  </p>

<p><pre class="prettyprint lang-py">
{literal}
$ buck query '//example/...' --output-attribute buck.type --output-attribute name --output-attribute srcs
{
  "//example/foo:bar" : {
    "buck.type" : "cxx_library",
    "name" : "foobar",
    "srcs" : [ "example/foo/bar.cc", "example/foo/lib/lib.cc" ]
  }
  "//example/foo:main" : {
    "buck.type" : "cxx_binary",
    "name" : "main"
  }
}
{/literal}
</pre>
</p>

</div>

  {/param}
{/call}
{/param}


{param examples}

<pre class="prettyprint lang-py">
{literal}
#
# For the following examples, assume this BUCK file exists in
# the `examples` directory.
#
cxx_library(
  name = 'one',
  srcs = [ '1.cpp' ],
  deps = [
    ':two',
    ':three',
  ],
)

cxx_library(
  name = 'two',
  srcs = [ '2.cpp' ],
  deps = [
    ':four',
  ],
  tests = [ ':two-tests' ]
)

cxx_library(
  name = 'three',
  srcs = [ '3.cpp' ],
  deps = [
    ':four',
    ':five',
  ],
  tests = [ ':three-tests' ],
)

cxx_library(
  name = 'four',
  srcs = [ '4.cpp' ],
  deps = [
    ':five',
  ]
)

cxx_library(
  name = 'five',
  srcs = [ '5.cpp' ],
)

cxx_test(
  name = 'two-tests',
  srcs = [ '2-test.cpp' ],
  deps = [ ':two' ],
)

cxx_test(
  name = 'three-tests',
  srcs = [ '3-test.cpp' ],
  deps = [ ':three' ],
)
{/literal}
</pre>

<p>
<b>Example</b>: List <em>all</em> the targets in the repository.
</p>

<p>
<pre>buck query "//..."</pre>
<pre>
{literal}
//examples:five
//examples:four
//examples:one
//examples:three
//examples:three-tests
//examples:two
//examples:two-tests
{/literal}
</pre>
</p>


<p>
<b>Example</b>: Resolve multiple aliases. 
</p>

<p>
Suppose <code>.buckconfig</code> contains the following aliases:
</p>

<p>
<pre>
{literal}
app = //apps/myapp:app
lib = //libraries/mylib:lib
{/literal}
</pre>
</p>

<p>
Then the following query
</p>

<p>
<pre>
{literal}
buck query "%s" app lib --output-format json
{/literal}
</pre>
</p>


<p>
returns
</p>

<pre class="prettyprint lang-js">
{literal}
{
  "app": ["//apps/myapp:app"],
  "lib": ["//libraries/mylib:lib"]
}
{/literal}
</pre>
</p>

<p>
<b>Example</b>: List all of the targets on which 
the <code>one</code> library <em>directly</em> depends. 
</p>

<p>
<pre>
{literal}
$ buck query "deps(//examples:one, 1)"
//examples:one
//examples:three
//examples:two
{/literal}
</pre>
</p>


<p>
<b>Example</b>: Display a JSON representation of the transitive closure of the targets
on which the <code>one</code> library depends. 
</p>

<p>
<pre>
{literal}
$ buck query "deps(//examples:one)"
[
  "//examples:five",
  "//examples:four",
  "//examples:one",
  "//examples:three",
  "//examples:two"
]
{/literal}
</pre>
</p>


<p>
<b>Example</b>: Display a JSON representation of the tests associated with 
the{sp} <code>one</code> and <code>three</code> libraries.
</p>

<p>
<pre>
{literal}
$ buck query --output-format json "testsof(deps('%s'))" //examples:one //examples:three
{
  "//examples:one": ["//examples:two-tests"],
  "//examples:three": ["//examples:three-tests"]
}
{/literal}
</pre>
</p>

<p>
<b>Example</b>: Display the build file that contains the target which is
the owner of the source file, <code>examples/1.cpp</code>.
</p>

<p>
<pre>
{literal}
$ buck query "buildfile(owner('examples/1.cpp'))"
example/BUCK
{/literal}
</pre>
</p>

{/param}

{/call}

    {/param}  // content
  {/call} // buck.page
{/template}
